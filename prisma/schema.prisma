generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @id @default(autoincrement())
  name String @unique  // required
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price Float
  description String? // Optional, Prisma will allow "null". When using this model in TypeScript, Prisma will treat description as string | null
  sale Boolean @default(false)
  availability Availability @default(IN_STOCK)

  supplier Supplier? // One-to-one relationship with Supplier
  reviews Review[] // One-to-many relationship with Review
  tags Tag[] // Many-to-many relationship with Tag
}

model Supplier{
  ID Int @id @default(autoincrement())
  company String @unique

  product Product @relation(fields: [productId], references: [id]) // One-to-one relationship with Product
  productId Int @unique // Unique constraint to ensure one-to-one relationship
}

model Review{
  id Int @id @default(autoincrement())
  title String 
  content String
  rating Int @default(1)

  product Product @relation(fields: [productId], references: [id]) // Many-to-one relationship with Product
  productId Int // Foreign key to Product
}

model Tag{
  id Int @id @default(autoincrement())
  content String

  products Product[] // Many-to-many relationship with Product
}

enum Availability {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}